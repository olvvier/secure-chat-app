// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Pressure {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Pressure {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPressure(bb:flatbuffers.ByteBuffer, obj?:Pressure):Pressure {
  return (obj || new Pressure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPressure(bb:flatbuffers.ByteBuffer, obj?:Pressure):Pressure {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pressure()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

temperatureCentiCelsius():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pressurePascal():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startPressure(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTemperatureCentiCelsius(builder:flatbuffers.Builder, temperatureCentiCelsius:number) {
  builder.addFieldInt32(0, temperatureCentiCelsius, 0);
}

static addPressurePascal(builder:flatbuffers.Builder, pressurePascal:number) {
  builder.addFieldInt32(1, pressurePascal, 0);
}

static endPressure(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPressure(builder:flatbuffers.Builder, temperatureCentiCelsius:number, pressurePascal:number):flatbuffers.Offset {
  Pressure.startPressure(builder);
  Pressure.addTemperatureCentiCelsius(builder, temperatureCentiCelsius);
  Pressure.addPressurePascal(builder, pressurePascal);
  return Pressure.endPressure(builder);
}
}
