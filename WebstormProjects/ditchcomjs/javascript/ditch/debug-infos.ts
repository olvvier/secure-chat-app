// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class DebugInfos {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DebugInfos {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDebugInfos(bb:flatbuffers.ByteBuffer, obj?:DebugInfos):DebugInfos {
  return (obj || new DebugInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDebugInfos(bb:flatbuffers.ByteBuffer, obj?:DebugInfos):DebugInfos {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DebugInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

minHeap():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

minFlash():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

uptime():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startDebugInfos(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMinHeap(builder:flatbuffers.Builder, minHeap:number) {
  builder.addFieldInt32(0, minHeap, 0);
}

static addMinFlash(builder:flatbuffers.Builder, minFlash:number) {
  builder.addFieldInt32(1, minFlash, 0);
}

static addUptime(builder:flatbuffers.Builder, uptime:number) {
  builder.addFieldInt32(2, uptime, 0);
}

static endDebugInfos(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDebugInfos(builder:flatbuffers.Builder, minHeap:number, minFlash:number, uptime:number):flatbuffers.Offset {
  DebugInfos.startDebugInfos(builder);
  DebugInfos.addMinHeap(builder, minHeap);
  DebugInfos.addMinFlash(builder, minFlash);
  DebugInfos.addUptime(builder, uptime);
  return DebugInfos.endDebugInfos(builder);
}
}
