// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Accel {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Accel {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAccel(bb:flatbuffers.ByteBuffer, obj?:Accel):Accel {
  return (obj || new Accel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAccel(bb:flatbuffers.ByteBuffer, obj?:Accel):Accel {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Accel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

temperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

z():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startAccel(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTemperature(builder:flatbuffers.Builder, temperature:number) {
  builder.addFieldFloat32(0, temperature, 0.0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt16(1, x, 0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt16(2, y, 0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldInt16(3, z, 0);
}

static endAccel(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAccel(builder:flatbuffers.Builder, temperature:number, x:number, y:number, z:number):flatbuffers.Offset {
  Accel.startAccel(builder);
  Accel.addTemperature(builder, temperature);
  Accel.addX(builder, x);
  Accel.addY(builder, y);
  Accel.addZ(builder, z);
  return Accel.endAccel(builder);
}
}
