// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DebugInfos } from '../ditch/debug-infos.js';
import { Pod } from '../ditch/pod.js';


export class Status {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Status {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatus(bb:flatbuffers.ByteBuffer, obj?:Status):Status {
  return (obj || new Status()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatus(bb:flatbuffers.ByteBuffer, obj?:Status):Status {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Status()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

time():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

firmwareVersion():string|null
firmwareVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firmwareVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

batteryLevel():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

pod(obj?:Pod):Pod|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Pod()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

charging():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

treatmentId():string|null
treatmentId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
treatmentId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

temperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

debugInfos(obj?:DebugInfos):DebugInfos|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new DebugInfos()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStatus(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addTime(builder:flatbuffers.Builder, time:number) {
  builder.addFieldInt32(1, time, 0);
}

static addFirmwareVersion(builder:flatbuffers.Builder, firmwareVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, firmwareVersionOffset, 0);
}

static addBatteryLevel(builder:flatbuffers.Builder, batteryLevel:number) {
  builder.addFieldInt32(3, batteryLevel, 0);
}

static addPod(builder:flatbuffers.Builder, podOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, podOffset, 0);
}

static addCharging(builder:flatbuffers.Builder, charging:boolean) {
  builder.addFieldInt8(5, +charging, +false);
}

static addTreatmentId(builder:flatbuffers.Builder, treatmentIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, treatmentIdOffset, 0);
}

static addTemperature(builder:flatbuffers.Builder, temperature:number) {
  builder.addFieldInt32(7, temperature, 0);
}

static addDebugInfos(builder:flatbuffers.Builder, debugInfosOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, debugInfosOffset, 0);
}

static endStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStatusBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedStatusBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
