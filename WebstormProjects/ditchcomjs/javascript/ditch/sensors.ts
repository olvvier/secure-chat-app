// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Accel } from '../ditch/accel.js';
import { Pressure } from '../ditch/pressure.js';


export class Sensors {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Sensors {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensors(bb:flatbuffers.ByteBuffer, obj?:Sensors):Sensors {
  return (obj || new Sensors()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensors(bb:flatbuffers.ByteBuffer, obj?:Sensors):Sensors {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Sensors()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

accel(obj?:Accel):Accel|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Accel()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

pressure(index: number, obj?:Pressure):Pressure|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Pressure()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pressureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSensors(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTime(builder:flatbuffers.Builder, time:number) {
  builder.addFieldInt32(0, time, 0);
}

static addAccel(builder:flatbuffers.Builder, accelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, accelOffset, 0);
}

static addPressure(builder:flatbuffers.Builder, pressureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pressureOffset, 0);
}

static createPressureVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPressureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSensors(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensorsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSensorsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
